input {
	file {
		path => ["/var/log/user.log"]
		type => "user"
		start_position => "beginning"
		sincedb_path => "/usr/local/logstash-6.1.1/sincedb/sincedb-user"
	}
	file {
		path => ["/var/log/auth.log"]
		type => "auth"
		start_position => "beginning"
		sincedb_path => "/usr/local/logstash-6.1.1/sincedb/sincedb-auth"
	}
	file {
		path => ["/var/log/daemon.log"]
		type => "daemon"
		start_position => "beginning"
		sincedb_path => "/usr/local/logstash-6.1.1/sincedb/sincedb-daemon"
	}
	file {
		path => ["/var/log/syslog"]
		type => "syslog"
		start_position => "beginning"
		sincedb_path => "/usr/local/logstash-6.1.1/sincedb/sincedb-syslog"
	}
	file {
		path => ["/var/log/kern.log"]
		type => "kern"
		start_position => "beginning"
		sincedb_path => "/usr/local/logstash-6.1.1/sincedb/sincedb-kern"
	}
	file {
		path => ["/var/log/cron.log"]
		type => "cron"
		start_position => "beginning"
		sincedb_path => "/usr/local/logstash-6.1.1/sincedb/sincedb-cron"
	}

	file {
		path => ["/var/log/apache2/access.log"]
        	type => "access_log"
        	start_position => "beginning"
        	sincedb_path => "/usr/local/logstash-6.1.1/sincedb/sincedb-access_log"
	}
	file {
		path => ["/var/log/apache2/error.log"]
        	type => "error_log"
        	start_position => "beginning"
        	sincedb_path => "/usr/local/logstash-6.1.1/sincedb/sincedb-error_log"
	}

	file {
		path => ["/var/log/critical"]
        	type => "critical"
        	start_position => "beginning"
        	sincedb_path => "/usr/local/logstash-6.1.1/sincedb/sincedb-critical"
	}

	file {
		path => ["/usr/local/systemInfoMonitor/sysInfo.log"]
		type => "sysinfo"
		start_position => "beginning"
		sincedb_path => "/usr/local/logstash-6.1.1/sincedb/sincedb-sysInfo"
	}

	file {
		path => ["/usr/local/systemInfoMonitor/pInfo.log"]
		type => "pinfo"
		start_position => "beginning"
		sincedb_path => "/usr/local/logstash-6.1.1/sincedb/sincedb-pInfo"
	}

    file {
		path => ["/var/log/audit/audit.log"]
        	type => "audit"
        	start_position => "beginning"
        	sincedb_path => "/usr/local/logstash-6.1.1/sincedb/sincedb-audit"
	}

}

filter {
	if [type] == "user" {
		grok {
			match => {
				"message" => "%{TIMESTAMP_ISO8601:time} %{USER:hostname} %{USER:userCmd}:\s*\[%{PATH:executeLocation}\]\s*%{NUMBER:orderNum}\s*\[%{TIMESTAMP_ISO8601:cmdTime}\] \[%{IP:clientIP}\] %{GREEDYDATA:cmdLine}"
			}
			add_field => {"HostIP" => "211.65.197.175"}
			add_tag => ["user"]
		}
		date {
            match => ["time", "yyyy-MM-dd HH:mm:ss"]
            target => "@timestamp"
        }
	}
	if [type] == "auth" {
		grok {
			match => {
				"message" => "%{TIMESTAMP_ISO8601:time} %{HOSTNAME:hostname} %{WORD:program}\[%{NUMBER:pid}\]: %{GREEDYDATA:info}"
			}
			add_field => {"HostIP" => "211.65.197.175"}
			add_tag => ["auth"]
			
		}
		date {
            match => ["time", "yyyy-MM-dd HH:mm:ss"]
            target => "@timestamp"
        }
	}
	if [type] == "daemon" {
		grok {
			match => {
				"message" => "(%{TIMESTAMP_ISO8601:time} %{HOSTNAME:hostname} %{PROG:program}(?:\[%{POSINT:pid}\])?: (?<info>.*))?"
			}
			add_field => {"HostIP" => "211.65.197.175"}
			add_tag => ["daemon"]
			
		}
		date {
            match => ["time", "yyyy-MM-dd HH:mm:ss"]
            target => "@timestamp"
        }
	}
	if [type] == "syslog" {
		grok {
			match => {
				"message" => "(%{TIMESTAMP_ISO8601:time} %{HOSTNAME:hostname} %{PROG:program}(?:\(%{PATH:program_path}\))?(?:\[%{POSINT:pid}\])?: (?<info>.*))?(?<OtherMessage>.*)?"
			}
			add_field => {"HostIP" => "211.65.197.175"}
			add_tag => ["syslog"]
			
		}
		date {
            match => ["time", "yyyy-MM-dd HH:mm:ss"]
            target => "@timestamp"
        }
	}
	if [type] == "kern" {
		grok {
			match => {
				"message" => "%{TIMESTAMP_ISO8601:time} %{HOSTNAME:hostname} %{WORD:program}: %{GREEDYDATA:info}"
			}
			add_field => {"HostIP" => "211.65.197.175"}
			add_tag => ["kern"]
			
		}
		date {
            match => ["time", "yyyy-MM-dd HH:mm:ss"]
            target => "@timestamp"
        }
	}
	if [type] == "cron" {
		grok {
			match => {
				"message" => "(%{TIMESTAMP_ISO8601:time} %{HOSTNAME:hostname} %{PROG:program}(?:\(%{PATH:program_path}\))?(?:\[%{POSINT:pid}\])?: (?<info>.*))?(?<OtherMessage>.*)?"
			}
			add_field => {"HostIP" => "211.65.197.175"}
			add_tag => ["cron"]
		}
		date {
            	match => ["time", "yyyy-MM-dd HH:mm:ss"]
                target => "@timestamp"
        }
    }	
    if [type] == "audit" {
		grok {
			match => {
				"message" => "(type=%{WORD:Action_type} msg=%{WORD:typeMsg}\(%{NUMBER:time}:%{NUMBER:lines}\): (%{WORD:action} )?(pid=%{NUMBER:pid})?( uid=%{NUMBER:uid})?( auid=%{NUMBER:auid})?( ses=%{NUMBER:ses})?( subj=(?<subj>\b\w+:\w+:\w+:.{5}:.{8}))?( msg=\'(?<msg>.*)\')?( old auid=%{NUMBER:old_auid} new auid=%{NUMBER:new_auid} old ses=%{NUMBER:old_ses} new ses=%{NUMBER:new_ses})?)?(?<OtherMessage>.*)?"
			}
			add_field => {"HostIP" => "211.65.197.175"}
			add_tag => ["audit"]
		}
		date {
        		match => ["time", "UNIX"]
        		target => "@timestamp"
    	}
	}

	if [type] == "access_log" {
		grok {
			match => {
				"message" => "(%{COMBINEDAPACHELOG})?(?<OtherMessage>.*)?"
			}
			add_field => {"HostIP" => "211.65.197.175"}
			add_tag => ["access_log"]
		}
		date {
        		match => ["timestamp", "dd/MMM/yyyy:HH:mm:ss Z"]
        		target => "@timestamp"
    		}
	}
	if [type] == "error_log" {
		grok {
			match => {
				"message" => "\[(?<time>%{DAY} %{MONTH} %{MONTHDAY} %{TIME} %{YEAR})\] \[%{WORD:module}:%{LOGLEVEL:loglevel}\] \[pid %{NUMBER:pid}\] %{DATA:errorcode}: %{GREEDYDATA:info}"
			}
			add_field => {"HostIP" => "211.65.197.175"}
			add_tag => ["error_log"]
		}
		date {
        	match => ["time", "EEE MMM dd HH:mm:ss.SSSSSS yyyy"]
			target => "@timestamp"
    	}
	}
	if [type] == "critical" {
		grok {
			match => {
				"message" => "(%{TIMESTAMP_ISO8601:time} %{HOSTNAME:hostname} %{PROG:program}(?:\(%{PATH:program_path}\))?(?:\[%{POSINT:pid}\])?: (?<info>.*))?(?<OtherMessage>.*)?"
			}
			add_field => {"HostIP" => "211.65.197.175"}
			add_tag => ["critical"]
		}
		date {
        	match => ["time", "yyyy-MM-dd HH:mm:ss"]
            target => "@timestamp"
        }
	}

	if [type] == "sysinfo" {
		grok{
			match => {
				"message" => "(%{TIMESTAMP_ISO8601:cdate} %{HOSTNAME:hostname} %{TIMESTAMP_ISO8601:bootdate} cpuTotal:%{NUMBER:cpuTotalTime} cpuUser:%{NUMBER:cpuUserTime} cpuSys:%{NUMBER:cpuSysTime} cpuIdle:%{NUMBER:cpuIdleTime} cpuPercent:%{NUMBER:cpuPercent} ctxSwitches:%{NUMBER:ctxSwitches} interrupts:%{NUMBER:interrupts} sInterrupts:%{NUMBER:sInterrupts} syscalls:%{NUMBER:syscalls} memTotal:%{NUMBER:memTotal} memAva:%{NUMBER:memAva} memPercent:%{NUMBER:memPercent} memUsed:%{NUMBER:memUsed} memFree:%{NUMBER:memFree} memBuffers:%{NUMBER:memBuffers} memCaches:%{NUMBER:memCaches} swapTotal:%{NUMBER:swapTotal} swapUsed:%{NUMBER:swapUsed} swapFree:%{NUMBER:swapFree} swapPercent:%{NUMBER:swapPercent} swapSin:%{NUMBER:swapSin} swapSout:%{NUMBER:swapSout} diskTotal:%{NUMBER:diskTotal} diskUsed:%{NUMBER:diskUsed} diskFree:%{NUMBER:diskFree} diskPercent:%{NUMBER:diskPercent} readCount:%{NUMBER:readCount} writeCount:%{NUMBER:writeCount} readByte:%{NUMBER:readByte} writeByte:%{NUMBER:writeByte} readTime:%{NUMBER:readTime} writeTime:%{NUMBER:writeTime} byteSent:%{NUMBER:byteSent} byteRecv:%{NUMBER:byteRecv} packetSent:%{NUMBER:packetSent} packetRecv:%{NUMBER:packetRecv} errin:%{NUMBER:errin} errout:%{NUMBER:errout} dropin:%{NUMBER:dropin} dropout:%{NUMBER:dropout} processNum:%{NUMBER:processNum} ports:%{GREEDYDATA:ports})"
			}
			add_field => {"HostIP" => "211.65.197.175"}
			add_tag => ["sysinfo"]
		}
		mutate {
			convert =>{"cpuTotalTime" => "float"}
			convert => {"cpuUserTime" => "float"} 
			convert => {"cpuSysTime" => "float"} 
			convert => {"cpuIdleTime" => "float"} 
			convert => {"cpuPercent" => "float"} 
			convert => {"ctxSwitches" => "float"} 
			convert => {"interrupts" => "float"} 
			convert => {"sInterrupts" => "float"} 
			convert => {"syscalls" => "float"} 
			convert => {"memTotal" => "float"} 
			convert => {"memAva" => "float"} 
			convert => {"memPercent" => "float"} 
			convert => {"memUsed" => "float"} 
			convert => {"memFree" => "float"} 
			convert => {"memBuffers" => "float"} 
			convert => {"memCaches" => "float"} 
			convert => {"swapTotal" => "float"} 
			convert => {"swapUsed" => "float"} 
			convert => {"swapFree" => "float"} 
			convert => {"swapPercent" => "float"} 
			convert => {"swapSin" => "float"} 
			convert => {"swapSout" => "float"} 
			convert => {"diskTotal" => "float"} 
			convert => {"diskUsed" => "float"} 
			convert => {"diskFree" => "float"} 
			convert => {"diskPercent" => "float"} 
			convert => {"readCount" => "float"} 
			convert => {"writeCount" => "float"} 
			convert => {"readByte" => "float"} 
			convert => {"writeByte" => "float"} 
			convert => {"writeTime" => "float"} 
			convert => {"byteSent" => "float"} 
			convert => {"byteRecv" => "float"} 
			convert => {"packetSent" => "float"} 
			convert => {"packetRecv" => "float"}
			convert => {"errin" => "float"} 
			convert => {"errout" => "float"} 
			convert => {"dropin" => "float"} 
			convert => {"dropout" => "float"}   
			
		}

		date {
    		match => [ "cdate", "yyyy-MM-dd HH:mm:ss" ]
    		target => "@timestamp"
  		}

  		date {
    		match => [ "bootdate", "yyyy-MM-dd HH:mm:ss" ]
    		target => "boot_date"
  		}

	}
	if [type] == "pinfo" {
		grok{
			match => {
				"message" => "(%{TIMESTAMP_ISO8601:c_date} %{HOSTNAME:host_name} %{NUMBER:start_time} procExe:(?<proc_exe>.*) procName:(?<proc_name>.*) procUser:%{USERNAME:user_name} procPID:%{NUMBER:pid} procPPID:%{NUMBER:ppid} procCPU:%{NUMBER:cpu_percent} procCPUUTime:%{NUMBER:cpu_user_time} procCPUSTime:%{NUMBER:cpu_sys_time} procMEM:%{NUMBER:mem_percent} procRSS:%{NUMBER:mem_rss} procVMS:%{NUMBER:mem_vms} procTTY:(?<terminal>.*) procSTAT:(?<proc_state>.*) procCMD:(?<proc_command>.*) procParam:(?<proc_param>.*) procRUID:%{NUMBER:ruid} procEUID:%{NUMBER:euid} procSUID:%{NUMBER:suid} procRGID:%{NUMBER:rgid} procEGID:%{NUMBER:egid} procSGID:%{NUMBER:sgid} procNice:%{NUMBER:nice} procCTXSWV:%{NUMBER:ctx_sw_voluntary} procCTXSWINV:%{NUMBER:ctx_sw_involuntary} procFDS:%{NUMBER:fds} procThreads:%{NUMBER:threads} procRCount:%{NUMBER:read_count} procWCount:%{NUMBER:write_count} procRBytes:%{NUMBER:read_byte} procWBytes:%{NUMBER:write_byte} procDiskRRate:%{NUMBER:disk_read_rate} procDiskWRate:%{NUMBER:disk_write_rate} procEnv:{(?<environment>.*)} procFile:\[(?<open_files>.*)\] procFileNum:%{NUMBER:file_num} procConnection:\[(?<connections>.*)\] procConnNum:%{NUMBER:connection_num} procSTART:%{NUMBER:start_time2} stopTime:%{NUMBER:stop_time})"
			}
			add_field => {"HostIP" => "211.65.197.175"}
			add_tag => ["pinfo"]
		}
		mutate{
			convert =>{"pid" => "integer"}
			convert =>{"ppid" => "integer"}
			convert =>{"cpu_percent" => "float"}
			convert =>{"cpu_user_time" => "float"}
			convert =>{"cpu_sys_time" => "float"}
			convert =>{"mem_percent" => "float"}
			convert =>{"mem_rss" => "float"}
			convert =>{"mem_vms" => "float"}
			convert =>{"ruid" => "integer"}
			convert =>{"euid" => "integer"}
			convert =>{"suid" => "integer"}
			convert =>{"rgid" => "integer"}
			convert =>{"egid" => "integer"}
			convert =>{"sgid" => "integer"}
			convert =>{"nice" => "integer"}
			convert =>{"ctx_sw_voluntary" => "float"}
			convert =>{"ctx_sw_involuntary" => "float"}
			convert =>{"fds" => "integer"}
			convert =>{"threads" => "integer"}
			convert =>{"read_count" => "integer"}
			convert =>{"write_count" => "integer"}
			convert =>{"read_byte" => "integer"}
			convert =>{"write_byte" => "integer"}
			convert =>{"disk_read_rate" => "float"}
			convert =>{"disk_write_rate" => "float"}
			convert =>{"file_num" => "integer"}
			convert =>{"connection_num" => "integer"}
		}

		date {
    		match => [ "c_date", "yyyy-MM-dd HH:mm:ss" ]
    		target => "@timestamp"
  		}

  		date {
    		match => [ "start_time", "UNIX" ]
    		target => "start_date"
  		}

	}
	ruby {
		code => "event.set('collect_date', event.get('@timestamp').time.localtime + 8*60*60)"
	}
	ruby {
		code => "event.set('index_date',event.get('collect_date'))"
	}
	mutate {
		convert => ["index_date","string"]
		gsub => ["index_date","T([\S\s]*?)Z", ""]
		gsub => ["index_date","-", "."]
	}
}

output {
	if "_grokparsefailure" in [tags] {
		elasticsearch {
			hosts => ["211.65.197.71:9200"]
			index => "grokparsefailure-%{index_date}"
		}
	}
	else if "_groktimeout" in [tags] {
		elasticsearch {
			hosts => ["211.65.197.71:9200"]
			index => "groktimeout-%{index_date}"
		}
	}
	else {
		elasticsearch {
			hosts => ["211.65.197.71:9200"]
			index => "211.65.197.175-%{type}-%{index_date}"
		}
	}
}
